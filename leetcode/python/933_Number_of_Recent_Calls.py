class RecentCounter:
    def __init__(self):
        # При инициализации создаем пустую очередь для хранения временных меток запросов
        # queue - очередь (список запросов)
        self.queue = deque()

    def ping(self, t: int) -> int:
        # 1. Добавляем новую временную метку (новый запрос) в конец очереди
        self.queue.append(t)

        # 2. Удаляем все устаревшие запросы из начала очереди:
        #    - queue[0] - самый старый запрос
        #    - Если он старше чем (t - 3000), значит он выходит за временное окно
        while self.queue[0] < t - 3000:
            # popleft() это метод deque, который удаляет первый элемент очереди и возвращает его.
            self.queue.popleft()  # Удаляем устаревший запрос

        # 3. Возвращаем количество актуальных запросов (длину очереди)
        return len(self.queue)

# Допустим, очередь: [1, 100, 3001]
# Вызываем ping(3002):
#
# 1. Добавляем 3002 → очередь: [1, 100, 3001, 3002]
# 2. Проверяем первый элемент:
# 1 < 3002 - 3000 → 1 < 2 → удаляем 1
# Теперь очередь: [100, 3001, 3002]
# Следующий 100 — 100 < 2? Нет → останавливаемся.
#
# Возвращаем длину очереди: 3
